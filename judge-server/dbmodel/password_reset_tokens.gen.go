// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbmodel

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"judge/dbmodel"
)

func newPasswordResetToken(db *gorm.DB, opts ...gen.DOOption) passwordResetToken {
	_passwordResetToken := passwordResetToken{}

	_passwordResetToken.passwordResetTokenDo.UseDB(db, opts...)
	_passwordResetToken.passwordResetTokenDo.UseModel(&dbmodel.PasswordResetToken{})

	tableName := _passwordResetToken.passwordResetTokenDo.TableName()
	_passwordResetToken.ALL = field.NewAsterisk(tableName)
	_passwordResetToken.Email = field.NewString(tableName, "email")
	_passwordResetToken.Token = field.NewString(tableName, "token")
	_passwordResetToken.CreatedAt = field.NewTime(tableName, "created_at")

	_passwordResetToken.fillFieldMap()

	return _passwordResetToken
}

type passwordResetToken struct {
	passwordResetTokenDo passwordResetTokenDo

	ALL       field.Asterisk
	Email     field.String
	Token     field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (p passwordResetToken) Table(newTableName string) *passwordResetToken {
	p.passwordResetTokenDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p passwordResetToken) As(alias string) *passwordResetToken {
	p.passwordResetTokenDo.DO = *(p.passwordResetTokenDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *passwordResetToken) updateTableName(table string) *passwordResetToken {
	p.ALL = field.NewAsterisk(table)
	p.Email = field.NewString(table, "email")
	p.Token = field.NewString(table, "token")
	p.CreatedAt = field.NewTime(table, "created_at")

	p.fillFieldMap()

	return p
}

func (p *passwordResetToken) WithContext(ctx context.Context) *passwordResetTokenDo {
	return p.passwordResetTokenDo.WithContext(ctx)
}

func (p passwordResetToken) TableName() string { return p.passwordResetTokenDo.TableName() }

func (p passwordResetToken) Alias() string { return p.passwordResetTokenDo.Alias() }

func (p passwordResetToken) Columns(cols ...field.Expr) gen.Columns {
	return p.passwordResetTokenDo.Columns(cols...)
}

func (p *passwordResetToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *passwordResetToken) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 3)
	p.fieldMap["email"] = p.Email
	p.fieldMap["token"] = p.Token
	p.fieldMap["created_at"] = p.CreatedAt
}

func (p passwordResetToken) clone(db *gorm.DB) passwordResetToken {
	p.passwordResetTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p passwordResetToken) replaceDB(db *gorm.DB) passwordResetToken {
	p.passwordResetTokenDo.ReplaceDB(db)
	return p
}

type passwordResetTokenDo struct{ gen.DO }

func (p passwordResetTokenDo) Debug() *passwordResetTokenDo {
	return p.withDO(p.DO.Debug())
}

func (p passwordResetTokenDo) WithContext(ctx context.Context) *passwordResetTokenDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p passwordResetTokenDo) ReadDB() *passwordResetTokenDo {
	return p.Clauses(dbresolver.Read)
}

func (p passwordResetTokenDo) WriteDB() *passwordResetTokenDo {
	return p.Clauses(dbresolver.Write)
}

func (p passwordResetTokenDo) Session(config *gorm.Session) *passwordResetTokenDo {
	return p.withDO(p.DO.Session(config))
}

func (p passwordResetTokenDo) Clauses(conds ...clause.Expression) *passwordResetTokenDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p passwordResetTokenDo) Returning(value interface{}, columns ...string) *passwordResetTokenDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p passwordResetTokenDo) Not(conds ...gen.Condition) *passwordResetTokenDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p passwordResetTokenDo) Or(conds ...gen.Condition) *passwordResetTokenDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p passwordResetTokenDo) Select(conds ...field.Expr) *passwordResetTokenDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p passwordResetTokenDo) Where(conds ...gen.Condition) *passwordResetTokenDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p passwordResetTokenDo) Order(conds ...field.Expr) *passwordResetTokenDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p passwordResetTokenDo) Distinct(cols ...field.Expr) *passwordResetTokenDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p passwordResetTokenDo) Omit(cols ...field.Expr) *passwordResetTokenDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p passwordResetTokenDo) Join(table schema.Tabler, on ...field.Expr) *passwordResetTokenDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p passwordResetTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) *passwordResetTokenDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p passwordResetTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) *passwordResetTokenDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p passwordResetTokenDo) Group(cols ...field.Expr) *passwordResetTokenDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p passwordResetTokenDo) Having(conds ...gen.Condition) *passwordResetTokenDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p passwordResetTokenDo) Limit(limit int) *passwordResetTokenDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p passwordResetTokenDo) Offset(offset int) *passwordResetTokenDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p passwordResetTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *passwordResetTokenDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p passwordResetTokenDo) Unscoped() *passwordResetTokenDo {
	return p.withDO(p.DO.Unscoped())
}

func (p passwordResetTokenDo) Create(values ...*dbmodel.PasswordResetToken) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p passwordResetTokenDo) CreateInBatches(values []*dbmodel.PasswordResetToken, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p passwordResetTokenDo) Save(values ...*dbmodel.PasswordResetToken) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p passwordResetTokenDo) First() (*dbmodel.PasswordResetToken, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.PasswordResetToken), nil
	}
}

func (p passwordResetTokenDo) Take() (*dbmodel.PasswordResetToken, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.PasswordResetToken), nil
	}
}

func (p passwordResetTokenDo) Last() (*dbmodel.PasswordResetToken, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.PasswordResetToken), nil
	}
}

func (p passwordResetTokenDo) Find() ([]*dbmodel.PasswordResetToken, error) {
	result, err := p.DO.Find()
	return result.([]*dbmodel.PasswordResetToken), err
}

func (p passwordResetTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodel.PasswordResetToken, err error) {
	buf := make([]*dbmodel.PasswordResetToken, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p passwordResetTokenDo) FindInBatches(result *[]*dbmodel.PasswordResetToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p passwordResetTokenDo) Attrs(attrs ...field.AssignExpr) *passwordResetTokenDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p passwordResetTokenDo) Assign(attrs ...field.AssignExpr) *passwordResetTokenDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p passwordResetTokenDo) Joins(fields ...field.RelationField) *passwordResetTokenDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p passwordResetTokenDo) Preload(fields ...field.RelationField) *passwordResetTokenDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p passwordResetTokenDo) FirstOrInit() (*dbmodel.PasswordResetToken, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.PasswordResetToken), nil
	}
}

func (p passwordResetTokenDo) FirstOrCreate() (*dbmodel.PasswordResetToken, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.PasswordResetToken), nil
	}
}

func (p passwordResetTokenDo) FindByPage(offset int, limit int) (result []*dbmodel.PasswordResetToken, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p passwordResetTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p passwordResetTokenDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p passwordResetTokenDo) Delete(models ...*dbmodel.PasswordResetToken) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *passwordResetTokenDo) withDO(do gen.Dao) *passwordResetTokenDo {
	p.DO = *do.(*gen.DO)
	return p
}
