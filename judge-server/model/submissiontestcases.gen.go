// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"judge/dbmodel"
)

func newSubmissionTestcase(db *gorm.DB, opts ...gen.DOOption) submissionTestcase {
	_submissionTestcase := submissionTestcase{}

	_submissionTestcase.submissionTestcaseDo.UseDB(db, opts...)
	_submissionTestcase.submissionTestcaseDo.UseModel(&dbmodel.SubmissionTestcase{})

	tableName := _submissionTestcase.submissionTestcaseDo.TableName()
	_submissionTestcase.ALL = field.NewAsterisk(tableName)
	_submissionTestcase.ID = field.NewInt64(tableName, "id")
	_submissionTestcase.SubmissionID = field.NewInt64(tableName, "submission_id")
	_submissionTestcase.TestcaseName = field.NewString(tableName, "testcase_name")
	_submissionTestcase.Status = field.NewString(tableName, "status")
	_submissionTestcase.ExecutionTime = field.NewInt32(tableName, "execution_time")
	_submissionTestcase.MemoryUsed = field.NewInt32(tableName, "memory_used")
	_submissionTestcase.Output = field.NewString(tableName, "output")
	_submissionTestcase.ErrorMessage = field.NewString(tableName, "error_message")
	_submissionTestcase.Score = field.NewInt32(tableName, "score")
	_submissionTestcase.JudgedAt = field.NewTime(tableName, "judged_at")

	_submissionTestcase.fillFieldMap()

	return _submissionTestcase
}

type submissionTestcase struct {
	submissionTestcaseDo submissionTestcaseDo

	ALL           field.Asterisk
	ID            field.Int64
	SubmissionID  field.Int64
	TestcaseName  field.String
	Status        field.String
	ExecutionTime field.Int32
	MemoryUsed    field.Int32
	Output        field.String
	ErrorMessage  field.String
	Score         field.Int32
	JudgedAt      field.Time

	fieldMap map[string]field.Expr
}

func (s submissionTestcase) Table(newTableName string) *submissionTestcase {
	s.submissionTestcaseDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s submissionTestcase) As(alias string) *submissionTestcase {
	s.submissionTestcaseDo.DO = *(s.submissionTestcaseDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *submissionTestcase) updateTableName(table string) *submissionTestcase {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.SubmissionID = field.NewInt64(table, "submission_id")
	s.TestcaseName = field.NewString(table, "testcase_name")
	s.Status = field.NewString(table, "status")
	s.ExecutionTime = field.NewInt32(table, "execution_time")
	s.MemoryUsed = field.NewInt32(table, "memory_used")
	s.Output = field.NewString(table, "output")
	s.ErrorMessage = field.NewString(table, "error_message")
	s.Score = field.NewInt32(table, "score")
	s.JudgedAt = field.NewTime(table, "judged_at")

	s.fillFieldMap()

	return s
}

func (s *submissionTestcase) WithContext(ctx context.Context) *submissionTestcaseDo {
	return s.submissionTestcaseDo.WithContext(ctx)
}

func (s submissionTestcase) TableName() string { return s.submissionTestcaseDo.TableName() }

func (s submissionTestcase) Alias() string { return s.submissionTestcaseDo.Alias() }

func (s submissionTestcase) Columns(cols ...field.Expr) gen.Columns {
	return s.submissionTestcaseDo.Columns(cols...)
}

func (s *submissionTestcase) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *submissionTestcase) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["submission_id"] = s.SubmissionID
	s.fieldMap["testcase_name"] = s.TestcaseName
	s.fieldMap["status"] = s.Status
	s.fieldMap["execution_time"] = s.ExecutionTime
	s.fieldMap["memory_used"] = s.MemoryUsed
	s.fieldMap["output"] = s.Output
	s.fieldMap["error_message"] = s.ErrorMessage
	s.fieldMap["score"] = s.Score
	s.fieldMap["judged_at"] = s.JudgedAt
}

func (s submissionTestcase) clone(db *gorm.DB) submissionTestcase {
	s.submissionTestcaseDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s submissionTestcase) replaceDB(db *gorm.DB) submissionTestcase {
	s.submissionTestcaseDo.ReplaceDB(db)
	return s
}

type submissionTestcaseDo struct{ gen.DO }

func (s submissionTestcaseDo) Debug() *submissionTestcaseDo {
	return s.withDO(s.DO.Debug())
}

func (s submissionTestcaseDo) WithContext(ctx context.Context) *submissionTestcaseDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s submissionTestcaseDo) ReadDB() *submissionTestcaseDo {
	return s.Clauses(dbresolver.Read)
}

func (s submissionTestcaseDo) WriteDB() *submissionTestcaseDo {
	return s.Clauses(dbresolver.Write)
}

func (s submissionTestcaseDo) Session(config *gorm.Session) *submissionTestcaseDo {
	return s.withDO(s.DO.Session(config))
}

func (s submissionTestcaseDo) Clauses(conds ...clause.Expression) *submissionTestcaseDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s submissionTestcaseDo) Returning(value interface{}, columns ...string) *submissionTestcaseDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s submissionTestcaseDo) Not(conds ...gen.Condition) *submissionTestcaseDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s submissionTestcaseDo) Or(conds ...gen.Condition) *submissionTestcaseDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s submissionTestcaseDo) Select(conds ...field.Expr) *submissionTestcaseDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s submissionTestcaseDo) Where(conds ...gen.Condition) *submissionTestcaseDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s submissionTestcaseDo) Order(conds ...field.Expr) *submissionTestcaseDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s submissionTestcaseDo) Distinct(cols ...field.Expr) *submissionTestcaseDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s submissionTestcaseDo) Omit(cols ...field.Expr) *submissionTestcaseDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s submissionTestcaseDo) Join(table schema.Tabler, on ...field.Expr) *submissionTestcaseDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s submissionTestcaseDo) LeftJoin(table schema.Tabler, on ...field.Expr) *submissionTestcaseDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s submissionTestcaseDo) RightJoin(table schema.Tabler, on ...field.Expr) *submissionTestcaseDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s submissionTestcaseDo) Group(cols ...field.Expr) *submissionTestcaseDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s submissionTestcaseDo) Having(conds ...gen.Condition) *submissionTestcaseDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s submissionTestcaseDo) Limit(limit int) *submissionTestcaseDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s submissionTestcaseDo) Offset(offset int) *submissionTestcaseDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s submissionTestcaseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *submissionTestcaseDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s submissionTestcaseDo) Unscoped() *submissionTestcaseDo {
	return s.withDO(s.DO.Unscoped())
}

func (s submissionTestcaseDo) Create(values ...*dbmodel.SubmissionTestcase) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s submissionTestcaseDo) CreateInBatches(values []*dbmodel.SubmissionTestcase, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s submissionTestcaseDo) Save(values ...*dbmodel.SubmissionTestcase) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s submissionTestcaseDo) First() (*dbmodel.SubmissionTestcase, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.SubmissionTestcase), nil
	}
}

func (s submissionTestcaseDo) Take() (*dbmodel.SubmissionTestcase, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.SubmissionTestcase), nil
	}
}

func (s submissionTestcaseDo) Last() (*dbmodel.SubmissionTestcase, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.SubmissionTestcase), nil
	}
}

func (s submissionTestcaseDo) Find() ([]*dbmodel.SubmissionTestcase, error) {
	result, err := s.DO.Find()
	return result.([]*dbmodel.SubmissionTestcase), err
}

func (s submissionTestcaseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodel.SubmissionTestcase, err error) {
	buf := make([]*dbmodel.SubmissionTestcase, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s submissionTestcaseDo) FindInBatches(result *[]*dbmodel.SubmissionTestcase, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s submissionTestcaseDo) Attrs(attrs ...field.AssignExpr) *submissionTestcaseDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s submissionTestcaseDo) Assign(attrs ...field.AssignExpr) *submissionTestcaseDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s submissionTestcaseDo) Joins(fields ...field.RelationField) *submissionTestcaseDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s submissionTestcaseDo) Preload(fields ...field.RelationField) *submissionTestcaseDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s submissionTestcaseDo) FirstOrInit() (*dbmodel.SubmissionTestcase, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.SubmissionTestcase), nil
	}
}

func (s submissionTestcaseDo) FirstOrCreate() (*dbmodel.SubmissionTestcase, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.SubmissionTestcase), nil
	}
}

func (s submissionTestcaseDo) FindByPage(offset int, limit int) (result []*dbmodel.SubmissionTestcase, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s submissionTestcaseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s submissionTestcaseDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s submissionTestcaseDo) Delete(models ...*dbmodel.SubmissionTestcase) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *submissionTestcaseDo) withDO(do gen.Dao) *submissionTestcaseDo {
	s.DO = *do.(*gen.DO)
	return s
}
