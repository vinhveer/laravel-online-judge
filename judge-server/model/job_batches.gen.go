// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"judge/dbmodel"
)

func newJobBatch(db *gorm.DB, opts ...gen.DOOption) jobBatch {
	_jobBatch := jobBatch{}

	_jobBatch.jobBatchDo.UseDB(db, opts...)
	_jobBatch.jobBatchDo.UseModel(&dbmodel.JobBatch{})

	tableName := _jobBatch.jobBatchDo.TableName()
	_jobBatch.ALL = field.NewAsterisk(tableName)
	_jobBatch.ID = field.NewString(tableName, "id")
	_jobBatch.Name = field.NewString(tableName, "name")
	_jobBatch.TotalJobs = field.NewInt32(tableName, "total_jobs")
	_jobBatch.PendingJobs = field.NewInt32(tableName, "pending_jobs")
	_jobBatch.FailedJobs = field.NewInt32(tableName, "failed_jobs")
	_jobBatch.FailedJobIds = field.NewString(tableName, "failed_job_ids")
	_jobBatch.Options = field.NewString(tableName, "options")
	_jobBatch.CancelledAt = field.NewInt32(tableName, "cancelled_at")
	_jobBatch.CreatedAt = field.NewInt32(tableName, "created_at")
	_jobBatch.FinishedAt = field.NewInt32(tableName, "finished_at")

	_jobBatch.fillFieldMap()

	return _jobBatch
}

type jobBatch struct {
	jobBatchDo jobBatchDo

	ALL          field.Asterisk
	ID           field.String
	Name         field.String
	TotalJobs    field.Int32
	PendingJobs  field.Int32
	FailedJobs   field.Int32
	FailedJobIds field.String
	Options      field.String
	CancelledAt  field.Int32
	CreatedAt    field.Int32
	FinishedAt   field.Int32

	fieldMap map[string]field.Expr
}

func (j jobBatch) Table(newTableName string) *jobBatch {
	j.jobBatchDo.UseTable(newTableName)
	return j.updateTableName(newTableName)
}

func (j jobBatch) As(alias string) *jobBatch {
	j.jobBatchDo.DO = *(j.jobBatchDo.As(alias).(*gen.DO))
	return j.updateTableName(alias)
}

func (j *jobBatch) updateTableName(table string) *jobBatch {
	j.ALL = field.NewAsterisk(table)
	j.ID = field.NewString(table, "id")
	j.Name = field.NewString(table, "name")
	j.TotalJobs = field.NewInt32(table, "total_jobs")
	j.PendingJobs = field.NewInt32(table, "pending_jobs")
	j.FailedJobs = field.NewInt32(table, "failed_jobs")
	j.FailedJobIds = field.NewString(table, "failed_job_ids")
	j.Options = field.NewString(table, "options")
	j.CancelledAt = field.NewInt32(table, "cancelled_at")
	j.CreatedAt = field.NewInt32(table, "created_at")
	j.FinishedAt = field.NewInt32(table, "finished_at")

	j.fillFieldMap()

	return j
}

func (j *jobBatch) WithContext(ctx context.Context) *jobBatchDo { return j.jobBatchDo.WithContext(ctx) }

func (j jobBatch) TableName() string { return j.jobBatchDo.TableName() }

func (j jobBatch) Alias() string { return j.jobBatchDo.Alias() }

func (j jobBatch) Columns(cols ...field.Expr) gen.Columns { return j.jobBatchDo.Columns(cols...) }

func (j *jobBatch) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := j.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (j *jobBatch) fillFieldMap() {
	j.fieldMap = make(map[string]field.Expr, 10)
	j.fieldMap["id"] = j.ID
	j.fieldMap["name"] = j.Name
	j.fieldMap["total_jobs"] = j.TotalJobs
	j.fieldMap["pending_jobs"] = j.PendingJobs
	j.fieldMap["failed_jobs"] = j.FailedJobs
	j.fieldMap["failed_job_ids"] = j.FailedJobIds
	j.fieldMap["options"] = j.Options
	j.fieldMap["cancelled_at"] = j.CancelledAt
	j.fieldMap["created_at"] = j.CreatedAt
	j.fieldMap["finished_at"] = j.FinishedAt
}

func (j jobBatch) clone(db *gorm.DB) jobBatch {
	j.jobBatchDo.ReplaceConnPool(db.Statement.ConnPool)
	return j
}

func (j jobBatch) replaceDB(db *gorm.DB) jobBatch {
	j.jobBatchDo.ReplaceDB(db)
	return j
}

type jobBatchDo struct{ gen.DO }

func (j jobBatchDo) Debug() *jobBatchDo {
	return j.withDO(j.DO.Debug())
}

func (j jobBatchDo) WithContext(ctx context.Context) *jobBatchDo {
	return j.withDO(j.DO.WithContext(ctx))
}

func (j jobBatchDo) ReadDB() *jobBatchDo {
	return j.Clauses(dbresolver.Read)
}

func (j jobBatchDo) WriteDB() *jobBatchDo {
	return j.Clauses(dbresolver.Write)
}

func (j jobBatchDo) Session(config *gorm.Session) *jobBatchDo {
	return j.withDO(j.DO.Session(config))
}

func (j jobBatchDo) Clauses(conds ...clause.Expression) *jobBatchDo {
	return j.withDO(j.DO.Clauses(conds...))
}

func (j jobBatchDo) Returning(value interface{}, columns ...string) *jobBatchDo {
	return j.withDO(j.DO.Returning(value, columns...))
}

func (j jobBatchDo) Not(conds ...gen.Condition) *jobBatchDo {
	return j.withDO(j.DO.Not(conds...))
}

func (j jobBatchDo) Or(conds ...gen.Condition) *jobBatchDo {
	return j.withDO(j.DO.Or(conds...))
}

func (j jobBatchDo) Select(conds ...field.Expr) *jobBatchDo {
	return j.withDO(j.DO.Select(conds...))
}

func (j jobBatchDo) Where(conds ...gen.Condition) *jobBatchDo {
	return j.withDO(j.DO.Where(conds...))
}

func (j jobBatchDo) Order(conds ...field.Expr) *jobBatchDo {
	return j.withDO(j.DO.Order(conds...))
}

func (j jobBatchDo) Distinct(cols ...field.Expr) *jobBatchDo {
	return j.withDO(j.DO.Distinct(cols...))
}

func (j jobBatchDo) Omit(cols ...field.Expr) *jobBatchDo {
	return j.withDO(j.DO.Omit(cols...))
}

func (j jobBatchDo) Join(table schema.Tabler, on ...field.Expr) *jobBatchDo {
	return j.withDO(j.DO.Join(table, on...))
}

func (j jobBatchDo) LeftJoin(table schema.Tabler, on ...field.Expr) *jobBatchDo {
	return j.withDO(j.DO.LeftJoin(table, on...))
}

func (j jobBatchDo) RightJoin(table schema.Tabler, on ...field.Expr) *jobBatchDo {
	return j.withDO(j.DO.RightJoin(table, on...))
}

func (j jobBatchDo) Group(cols ...field.Expr) *jobBatchDo {
	return j.withDO(j.DO.Group(cols...))
}

func (j jobBatchDo) Having(conds ...gen.Condition) *jobBatchDo {
	return j.withDO(j.DO.Having(conds...))
}

func (j jobBatchDo) Limit(limit int) *jobBatchDo {
	return j.withDO(j.DO.Limit(limit))
}

func (j jobBatchDo) Offset(offset int) *jobBatchDo {
	return j.withDO(j.DO.Offset(offset))
}

func (j jobBatchDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *jobBatchDo {
	return j.withDO(j.DO.Scopes(funcs...))
}

func (j jobBatchDo) Unscoped() *jobBatchDo {
	return j.withDO(j.DO.Unscoped())
}

func (j jobBatchDo) Create(values ...*dbmodel.JobBatch) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Create(values)
}

func (j jobBatchDo) CreateInBatches(values []*dbmodel.JobBatch, batchSize int) error {
	return j.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (j jobBatchDo) Save(values ...*dbmodel.JobBatch) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Save(values)
}

func (j jobBatchDo) First() (*dbmodel.JobBatch, error) {
	if result, err := j.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.JobBatch), nil
	}
}

func (j jobBatchDo) Take() (*dbmodel.JobBatch, error) {
	if result, err := j.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.JobBatch), nil
	}
}

func (j jobBatchDo) Last() (*dbmodel.JobBatch, error) {
	if result, err := j.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.JobBatch), nil
	}
}

func (j jobBatchDo) Find() ([]*dbmodel.JobBatch, error) {
	result, err := j.DO.Find()
	return result.([]*dbmodel.JobBatch), err
}

func (j jobBatchDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodel.JobBatch, err error) {
	buf := make([]*dbmodel.JobBatch, 0, batchSize)
	err = j.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (j jobBatchDo) FindInBatches(result *[]*dbmodel.JobBatch, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return j.DO.FindInBatches(result, batchSize, fc)
}

func (j jobBatchDo) Attrs(attrs ...field.AssignExpr) *jobBatchDo {
	return j.withDO(j.DO.Attrs(attrs...))
}

func (j jobBatchDo) Assign(attrs ...field.AssignExpr) *jobBatchDo {
	return j.withDO(j.DO.Assign(attrs...))
}

func (j jobBatchDo) Joins(fields ...field.RelationField) *jobBatchDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Joins(_f))
	}
	return &j
}

func (j jobBatchDo) Preload(fields ...field.RelationField) *jobBatchDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Preload(_f))
	}
	return &j
}

func (j jobBatchDo) FirstOrInit() (*dbmodel.JobBatch, error) {
	if result, err := j.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.JobBatch), nil
	}
}

func (j jobBatchDo) FirstOrCreate() (*dbmodel.JobBatch, error) {
	if result, err := j.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.JobBatch), nil
	}
}

func (j jobBatchDo) FindByPage(offset int, limit int) (result []*dbmodel.JobBatch, count int64, err error) {
	result, err = j.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = j.Offset(-1).Limit(-1).Count()
	return
}

func (j jobBatchDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = j.Count()
	if err != nil {
		return
	}

	err = j.Offset(offset).Limit(limit).Scan(result)
	return
}

func (j jobBatchDo) Scan(result interface{}) (err error) {
	return j.DO.Scan(result)
}

func (j jobBatchDo) Delete(models ...*dbmodel.JobBatch) (result gen.ResultInfo, err error) {
	return j.DO.Delete(models)
}

func (j *jobBatchDo) withDO(do gen.Dao) *jobBatchDo {
	j.DO = *do.(*gen.DO)
	return j
}
