// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbmodel

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"judge/dbmodel"
)

func newProblem(db *gorm.DB, opts ...gen.DOOption) problem {
	_problem := problem{}

	_problem.problemDo.UseDB(db, opts...)
	_problem.problemDo.UseModel(&dbmodel.Problem{})

	tableName := _problem.problemDo.TableName()
	_problem.ALL = field.NewAsterisk(tableName)
	_problem.ID = field.NewString(tableName, "id")
	_problem.Name = field.NewString(tableName, "name")
	_problem.Content = field.NewString(tableName, "content")
	_problem.CreatedAt = field.NewTime(tableName, "created_at")
	_problem.Difficulty = field.NewString(tableName, "difficulty")
	_problem.TimeLimit = field.NewInt32(tableName, "time_limit")
	_problem.MemoryLimit = field.NewInt32(tableName, "memory_limit")
	_problem.IsPublic = field.NewBool(tableName, "is_public")

	_problem.fillFieldMap()

	return _problem
}

type problem struct {
	problemDo problemDo

	ALL         field.Asterisk
	ID          field.String
	Name        field.String
	Content     field.String
	CreatedAt   field.Time
	Difficulty  field.String
	TimeLimit   field.Int32
	MemoryLimit field.Int32
	IsPublic    field.Bool

	fieldMap map[string]field.Expr
}

func (p problem) Table(newTableName string) *problem {
	p.problemDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p problem) As(alias string) *problem {
	p.problemDo.DO = *(p.problemDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *problem) updateTableName(table string) *problem {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.Name = field.NewString(table, "name")
	p.Content = field.NewString(table, "content")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.Difficulty = field.NewString(table, "difficulty")
	p.TimeLimit = field.NewInt32(table, "time_limit")
	p.MemoryLimit = field.NewInt32(table, "memory_limit")
	p.IsPublic = field.NewBool(table, "is_public")

	p.fillFieldMap()

	return p
}

func (p *problem) WithContext(ctx context.Context) *problemDo { return p.problemDo.WithContext(ctx) }

func (p problem) TableName() string { return p.problemDo.TableName() }

func (p problem) Alias() string { return p.problemDo.Alias() }

func (p problem) Columns(cols ...field.Expr) gen.Columns { return p.problemDo.Columns(cols...) }

func (p *problem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *problem) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name
	p.fieldMap["content"] = p.Content
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["difficulty"] = p.Difficulty
	p.fieldMap["time_limit"] = p.TimeLimit
	p.fieldMap["memory_limit"] = p.MemoryLimit
	p.fieldMap["is_public"] = p.IsPublic
}

func (p problem) clone(db *gorm.DB) problem {
	p.problemDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p problem) replaceDB(db *gorm.DB) problem {
	p.problemDo.ReplaceDB(db)
	return p
}

type problemDo struct{ gen.DO }

func (p problemDo) Debug() *problemDo {
	return p.withDO(p.DO.Debug())
}

func (p problemDo) WithContext(ctx context.Context) *problemDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p problemDo) ReadDB() *problemDo {
	return p.Clauses(dbresolver.Read)
}

func (p problemDo) WriteDB() *problemDo {
	return p.Clauses(dbresolver.Write)
}

func (p problemDo) Session(config *gorm.Session) *problemDo {
	return p.withDO(p.DO.Session(config))
}

func (p problemDo) Clauses(conds ...clause.Expression) *problemDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p problemDo) Returning(value interface{}, columns ...string) *problemDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p problemDo) Not(conds ...gen.Condition) *problemDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p problemDo) Or(conds ...gen.Condition) *problemDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p problemDo) Select(conds ...field.Expr) *problemDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p problemDo) Where(conds ...gen.Condition) *problemDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p problemDo) Order(conds ...field.Expr) *problemDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p problemDo) Distinct(cols ...field.Expr) *problemDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p problemDo) Omit(cols ...field.Expr) *problemDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p problemDo) Join(table schema.Tabler, on ...field.Expr) *problemDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p problemDo) LeftJoin(table schema.Tabler, on ...field.Expr) *problemDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p problemDo) RightJoin(table schema.Tabler, on ...field.Expr) *problemDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p problemDo) Group(cols ...field.Expr) *problemDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p problemDo) Having(conds ...gen.Condition) *problemDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p problemDo) Limit(limit int) *problemDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p problemDo) Offset(offset int) *problemDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p problemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *problemDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p problemDo) Unscoped() *problemDo {
	return p.withDO(p.DO.Unscoped())
}

func (p problemDo) Create(values ...*dbmodel.Problem) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p problemDo) CreateInBatches(values []*dbmodel.Problem, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p problemDo) Save(values ...*dbmodel.Problem) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p problemDo) First() (*dbmodel.Problem, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Problem), nil
	}
}

func (p problemDo) Take() (*dbmodel.Problem, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Problem), nil
	}
}

func (p problemDo) Last() (*dbmodel.Problem, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Problem), nil
	}
}

func (p problemDo) Find() ([]*dbmodel.Problem, error) {
	result, err := p.DO.Find()
	return result.([]*dbmodel.Problem), err
}

func (p problemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodel.Problem, err error) {
	buf := make([]*dbmodel.Problem, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p problemDo) FindInBatches(result *[]*dbmodel.Problem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p problemDo) Attrs(attrs ...field.AssignExpr) *problemDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p problemDo) Assign(attrs ...field.AssignExpr) *problemDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p problemDo) Joins(fields ...field.RelationField) *problemDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p problemDo) Preload(fields ...field.RelationField) *problemDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p problemDo) FirstOrInit() (*dbmodel.Problem, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Problem), nil
	}
}

func (p problemDo) FirstOrCreate() (*dbmodel.Problem, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Problem), nil
	}
}

func (p problemDo) FindByPage(offset int, limit int) (result []*dbmodel.Problem, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p problemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p problemDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p problemDo) Delete(models ...*dbmodel.Problem) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *problemDo) withDO(do gen.Dao) *problemDo {
	p.DO = *do.(*gen.DO)
	return p
}
