// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbmodel

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"judge/dbmodel"
)

func newCacheLock(db *gorm.DB, opts ...gen.DOOption) cacheLock {
	_cacheLock := cacheLock{}

	_cacheLock.cacheLockDo.UseDB(db, opts...)
	_cacheLock.cacheLockDo.UseModel(&dbmodel.CacheLock{})

	tableName := _cacheLock.cacheLockDo.TableName()
	_cacheLock.ALL = field.NewAsterisk(tableName)
	_cacheLock.Key = field.NewString(tableName, "key")
	_cacheLock.Owner = field.NewString(tableName, "owner")
	_cacheLock.Expiration = field.NewInt32(tableName, "expiration")

	_cacheLock.fillFieldMap()

	return _cacheLock
}

type cacheLock struct {
	cacheLockDo cacheLockDo

	ALL        field.Asterisk
	Key        field.String
	Owner      field.String
	Expiration field.Int32

	fieldMap map[string]field.Expr
}

func (c cacheLock) Table(newTableName string) *cacheLock {
	c.cacheLockDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cacheLock) As(alias string) *cacheLock {
	c.cacheLockDo.DO = *(c.cacheLockDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cacheLock) updateTableName(table string) *cacheLock {
	c.ALL = field.NewAsterisk(table)
	c.Key = field.NewString(table, "key")
	c.Owner = field.NewString(table, "owner")
	c.Expiration = field.NewInt32(table, "expiration")

	c.fillFieldMap()

	return c
}

func (c *cacheLock) WithContext(ctx context.Context) *cacheLockDo {
	return c.cacheLockDo.WithContext(ctx)
}

func (c cacheLock) TableName() string { return c.cacheLockDo.TableName() }

func (c cacheLock) Alias() string { return c.cacheLockDo.Alias() }

func (c cacheLock) Columns(cols ...field.Expr) gen.Columns { return c.cacheLockDo.Columns(cols...) }

func (c *cacheLock) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cacheLock) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 3)
	c.fieldMap["key"] = c.Key
	c.fieldMap["owner"] = c.Owner
	c.fieldMap["expiration"] = c.Expiration
}

func (c cacheLock) clone(db *gorm.DB) cacheLock {
	c.cacheLockDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cacheLock) replaceDB(db *gorm.DB) cacheLock {
	c.cacheLockDo.ReplaceDB(db)
	return c
}

type cacheLockDo struct{ gen.DO }

func (c cacheLockDo) Debug() *cacheLockDo {
	return c.withDO(c.DO.Debug())
}

func (c cacheLockDo) WithContext(ctx context.Context) *cacheLockDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cacheLockDo) ReadDB() *cacheLockDo {
	return c.Clauses(dbresolver.Read)
}

func (c cacheLockDo) WriteDB() *cacheLockDo {
	return c.Clauses(dbresolver.Write)
}

func (c cacheLockDo) Session(config *gorm.Session) *cacheLockDo {
	return c.withDO(c.DO.Session(config))
}

func (c cacheLockDo) Clauses(conds ...clause.Expression) *cacheLockDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cacheLockDo) Returning(value interface{}, columns ...string) *cacheLockDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cacheLockDo) Not(conds ...gen.Condition) *cacheLockDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cacheLockDo) Or(conds ...gen.Condition) *cacheLockDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cacheLockDo) Select(conds ...field.Expr) *cacheLockDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cacheLockDo) Where(conds ...gen.Condition) *cacheLockDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cacheLockDo) Order(conds ...field.Expr) *cacheLockDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cacheLockDo) Distinct(cols ...field.Expr) *cacheLockDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cacheLockDo) Omit(cols ...field.Expr) *cacheLockDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cacheLockDo) Join(table schema.Tabler, on ...field.Expr) *cacheLockDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cacheLockDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cacheLockDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cacheLockDo) RightJoin(table schema.Tabler, on ...field.Expr) *cacheLockDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cacheLockDo) Group(cols ...field.Expr) *cacheLockDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cacheLockDo) Having(conds ...gen.Condition) *cacheLockDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cacheLockDo) Limit(limit int) *cacheLockDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cacheLockDo) Offset(offset int) *cacheLockDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cacheLockDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cacheLockDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cacheLockDo) Unscoped() *cacheLockDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cacheLockDo) Create(values ...*dbmodel.CacheLock) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cacheLockDo) CreateInBatches(values []*dbmodel.CacheLock, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cacheLockDo) Save(values ...*dbmodel.CacheLock) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cacheLockDo) First() (*dbmodel.CacheLock, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.CacheLock), nil
	}
}

func (c cacheLockDo) Take() (*dbmodel.CacheLock, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.CacheLock), nil
	}
}

func (c cacheLockDo) Last() (*dbmodel.CacheLock, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.CacheLock), nil
	}
}

func (c cacheLockDo) Find() ([]*dbmodel.CacheLock, error) {
	result, err := c.DO.Find()
	return result.([]*dbmodel.CacheLock), err
}

func (c cacheLockDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodel.CacheLock, err error) {
	buf := make([]*dbmodel.CacheLock, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cacheLockDo) FindInBatches(result *[]*dbmodel.CacheLock, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cacheLockDo) Attrs(attrs ...field.AssignExpr) *cacheLockDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cacheLockDo) Assign(attrs ...field.AssignExpr) *cacheLockDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cacheLockDo) Joins(fields ...field.RelationField) *cacheLockDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cacheLockDo) Preload(fields ...field.RelationField) *cacheLockDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cacheLockDo) FirstOrInit() (*dbmodel.CacheLock, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.CacheLock), nil
	}
}

func (c cacheLockDo) FirstOrCreate() (*dbmodel.CacheLock, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.CacheLock), nil
	}
}

func (c cacheLockDo) FindByPage(offset int, limit int) (result []*dbmodel.CacheLock, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cacheLockDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cacheLockDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cacheLockDo) Delete(models ...*dbmodel.CacheLock) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cacheLockDo) withDO(do gen.Dao) *cacheLockDo {
	c.DO = *do.(*gen.DO)
	return c
}
