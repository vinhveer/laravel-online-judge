// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbmodel

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"judge/dbmodel"
)

func newFailedJob(db *gorm.DB, opts ...gen.DOOption) failedJob {
	_failedJob := failedJob{}

	_failedJob.failedJobDo.UseDB(db, opts...)
	_failedJob.failedJobDo.UseModel(&dbmodel.FailedJob{})

	tableName := _failedJob.failedJobDo.TableName()
	_failedJob.ALL = field.NewAsterisk(tableName)
	_failedJob.ID = field.NewInt64(tableName, "id")
	_failedJob.UUID = field.NewString(tableName, "uuid")
	_failedJob.Connection = field.NewString(tableName, "connection")
	_failedJob.Queue = field.NewString(tableName, "queue")
	_failedJob.Payload = field.NewString(tableName, "payload")
	_failedJob.Exception = field.NewString(tableName, "exception")
	_failedJob.FailedAt = field.NewTime(tableName, "failed_at")

	_failedJob.fillFieldMap()

	return _failedJob
}

type failedJob struct {
	failedJobDo failedJobDo

	ALL        field.Asterisk
	ID         field.Int64
	UUID       field.String
	Connection field.String
	Queue      field.String
	Payload    field.String
	Exception  field.String
	FailedAt   field.Time

	fieldMap map[string]field.Expr
}

func (f failedJob) Table(newTableName string) *failedJob {
	f.failedJobDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f failedJob) As(alias string) *failedJob {
	f.failedJobDo.DO = *(f.failedJobDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *failedJob) updateTableName(table string) *failedJob {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.UUID = field.NewString(table, "uuid")
	f.Connection = field.NewString(table, "connection")
	f.Queue = field.NewString(table, "queue")
	f.Payload = field.NewString(table, "payload")
	f.Exception = field.NewString(table, "exception")
	f.FailedAt = field.NewTime(table, "failed_at")

	f.fillFieldMap()

	return f
}

func (f *failedJob) WithContext(ctx context.Context) *failedJobDo {
	return f.failedJobDo.WithContext(ctx)
}

func (f failedJob) TableName() string { return f.failedJobDo.TableName() }

func (f failedJob) Alias() string { return f.failedJobDo.Alias() }

func (f failedJob) Columns(cols ...field.Expr) gen.Columns { return f.failedJobDo.Columns(cols...) }

func (f *failedJob) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *failedJob) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 7)
	f.fieldMap["id"] = f.ID
	f.fieldMap["uuid"] = f.UUID
	f.fieldMap["connection"] = f.Connection
	f.fieldMap["queue"] = f.Queue
	f.fieldMap["payload"] = f.Payload
	f.fieldMap["exception"] = f.Exception
	f.fieldMap["failed_at"] = f.FailedAt
}

func (f failedJob) clone(db *gorm.DB) failedJob {
	f.failedJobDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f failedJob) replaceDB(db *gorm.DB) failedJob {
	f.failedJobDo.ReplaceDB(db)
	return f
}

type failedJobDo struct{ gen.DO }

func (f failedJobDo) Debug() *failedJobDo {
	return f.withDO(f.DO.Debug())
}

func (f failedJobDo) WithContext(ctx context.Context) *failedJobDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f failedJobDo) ReadDB() *failedJobDo {
	return f.Clauses(dbresolver.Read)
}

func (f failedJobDo) WriteDB() *failedJobDo {
	return f.Clauses(dbresolver.Write)
}

func (f failedJobDo) Session(config *gorm.Session) *failedJobDo {
	return f.withDO(f.DO.Session(config))
}

func (f failedJobDo) Clauses(conds ...clause.Expression) *failedJobDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f failedJobDo) Returning(value interface{}, columns ...string) *failedJobDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f failedJobDo) Not(conds ...gen.Condition) *failedJobDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f failedJobDo) Or(conds ...gen.Condition) *failedJobDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f failedJobDo) Select(conds ...field.Expr) *failedJobDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f failedJobDo) Where(conds ...gen.Condition) *failedJobDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f failedJobDo) Order(conds ...field.Expr) *failedJobDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f failedJobDo) Distinct(cols ...field.Expr) *failedJobDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f failedJobDo) Omit(cols ...field.Expr) *failedJobDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f failedJobDo) Join(table schema.Tabler, on ...field.Expr) *failedJobDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f failedJobDo) LeftJoin(table schema.Tabler, on ...field.Expr) *failedJobDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f failedJobDo) RightJoin(table schema.Tabler, on ...field.Expr) *failedJobDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f failedJobDo) Group(cols ...field.Expr) *failedJobDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f failedJobDo) Having(conds ...gen.Condition) *failedJobDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f failedJobDo) Limit(limit int) *failedJobDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f failedJobDo) Offset(offset int) *failedJobDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f failedJobDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *failedJobDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f failedJobDo) Unscoped() *failedJobDo {
	return f.withDO(f.DO.Unscoped())
}

func (f failedJobDo) Create(values ...*dbmodel.FailedJob) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f failedJobDo) CreateInBatches(values []*dbmodel.FailedJob, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f failedJobDo) Save(values ...*dbmodel.FailedJob) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f failedJobDo) First() (*dbmodel.FailedJob, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.FailedJob), nil
	}
}

func (f failedJobDo) Take() (*dbmodel.FailedJob, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.FailedJob), nil
	}
}

func (f failedJobDo) Last() (*dbmodel.FailedJob, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.FailedJob), nil
	}
}

func (f failedJobDo) Find() ([]*dbmodel.FailedJob, error) {
	result, err := f.DO.Find()
	return result.([]*dbmodel.FailedJob), err
}

func (f failedJobDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodel.FailedJob, err error) {
	buf := make([]*dbmodel.FailedJob, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f failedJobDo) FindInBatches(result *[]*dbmodel.FailedJob, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f failedJobDo) Attrs(attrs ...field.AssignExpr) *failedJobDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f failedJobDo) Assign(attrs ...field.AssignExpr) *failedJobDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f failedJobDo) Joins(fields ...field.RelationField) *failedJobDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f failedJobDo) Preload(fields ...field.RelationField) *failedJobDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f failedJobDo) FirstOrInit() (*dbmodel.FailedJob, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.FailedJob), nil
	}
}

func (f failedJobDo) FirstOrCreate() (*dbmodel.FailedJob, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.FailedJob), nil
	}
}

func (f failedJobDo) FindByPage(offset int, limit int) (result []*dbmodel.FailedJob, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f failedJobDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f failedJobDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f failedJobDo) Delete(models ...*dbmodel.FailedJob) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *failedJobDo) withDO(do gen.Dao) *failedJobDo {
	f.DO = *do.(*gen.DO)
	return f
}
